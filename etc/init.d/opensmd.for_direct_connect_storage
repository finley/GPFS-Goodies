#!/bin/bash

#
#   2014.01.24 Brian Elliott Finley <bfinley@lenovo.com>
#   - Modified to handle multiple instances on specific ports, say for
#     example use with a direct connect IB disk subsystem.  Currently
#     hard coded to work with all ports on mlx4_1 and mlx4_2.
#   2014.06.17 Lerone Latouche <llatouche@lenovo.com> (w/minor tweaks by Brian)
#   - Add a sleep after start of each opensm instance
#   - Add comments on required srptools package
#

#
# Bring up/down opensm
#
# chkconfig: - 15 85
# description: Activates/Deactivates InfiniBand Subnet Manager
#
### BEGIN INIT INFO
# Provides:       opensm
# Required-Start: $syslog openibd
# Required-Stop: $syslog openibd
# Default-Start: null
# Default-Stop: 0 1 6
# Description:  Manage OpenSM
### END INIT INFO
#
# Copyright (c) 2008 Voltaire, Inc. All rights reserved.
# Copyright (c) 2006 Mellanox Technologies. All rights reserved.
#
# This Software is licensed under one of the following licenses:
#
# 1) under the terms of the "Common Public License 1.0" a copy of which is
#    available from the Open Source Initiative, see
#    http://www.opensource.org/licenses/cpl.php.
#
# 2) under the terms of the "The BSD License" a copy of which is
#    available from the Open Source Initiative, see
#    http://www.opensource.org/licenses/bsd-license.php.
#
# 3) under the terms of the "GNU General Public License (GPL) Version 2" a
#    copy of which is available from the Open Source Initiative, see
#    http://www.opensource.org/licenses/gpl-license.php.
#
# Licensee has the right to choose one of the above licenses.
#
# Redistributions of source code must retain the above copyright
# notice and one of the license notices.
#
# Redistributions in binary form must reproduce both the above copyright
# notice, one of the license notices in the documentation
# and/or other materials provided with the distribution.
#
#
#  $Id: openib-1.0-opensm.init,v 1.5 2006/08/02 18:18:23 dledford Exp $
#
# processname: /usr/sbin/opensm
# config: /etc/sysconfig/opensm
# pidfile: /var/run/opensm.pid

prefix=/usr
exec_prefix=/usr

. /etc/rc.d/init.d/functions

CONFIG=/etc/sysconfig/opensm
if [ -f $CONFIG ]; then
    . $CONFIG
fi

DIRECT_CONNECT_STORAGE_PORTS=/etc/opensm/direct_connect_storage_ports.conf
if [ ! -r "$DIRECT_CONNECT_STORAGE_PORTS" ]; then
    echo "
    $0: $DIRECT_CONNECT_STORAGE_PORTS doesn't exist.  
    
    Please create it, and add a list of the ports that are directly connected to
    your storage.  The format should look like the example below.  
    
        # Lines that start with '#' will be treated as comments:
        mlx4_0/1
        mlx4_1/1
        mlx4_4/1
        mlx4_4/2
        etc.


    Also, you'll need to make sure that you have the srptools RPM installed.  
    Just scrape-n-paste this command to verify:

        yum install srptools


    And you'll need to have the following options specified in
    /etc/infiniband/openib.conf:

        # Load SRP module
        SRP_LOAD=yes

        # Enable SRP High Availability daemon
        SRPHA_ENABLE=no
        SRP_DAEMON_ENABLE=yes

    The above settings were taken from section '5.4.4 FlashSystem 840 and Linux
    client hosts' of the 'Implementing IBM FlashSystem 840' Redbook, which can
    be found here:  http://www.redbooks.ibm.com/redbooks/pdfs/sg248189.pdf

    "
fi

prog=/usr/sbin/opensm
bin=${prog##*/}

# Handover daemon for updating guid2lid cache file
sldd_prog=/usr/sbin/sldd.sh
sldd_bin=${sldd_prog##*/}
sldd_pid_file=/var/run/sldd.pid

ACTION=$1

#
#   For direct connect storage, we set the PID_FILE per daemon instance
#   in the "case" section down below. -BEF-
#
# Setting OpenSM start parameters
#PID_FILE=/var/run/${bin}.pid
#touch $PID_FILE

if [[ -n "${OSM_HOSTS}" && $(echo -n ${OSM_HOSTS} | wc -w | tr -d '[:space:]') -gt 1  ]]; then
    HONORE_GUID2LID="--honor_guid2lid"
fi

#########################################################################

get_guids()
{
    for PORT in $(egrep -v '^(#|$)' "$DIRECT_CONNECT_STORAGE_PORTS" | grep mlx)
    do
        #
        # Make sure there's a space in the port (ie. mlx4_1/1 => "mlx4_1 1")
        #
        PORT=$( echo "$PORT" | tr '/'  ' ' )
        ibstat $PORT 2>/dev/null | grep 'Port GUID' | awk '{print $NF}'
    done
}

start_sldd()
{
    if [ -f $sldd_pid_file ]; then
            local line p
            read line < $sldd_pid_file
            for p in $line ; do
                    [ -z "${p//[0-9]/}" -a -d "/proc/$p" ] && sldd_pid="$sldd_pid $p"
            done
    fi

    if [ -z "$sldd_pid" ]; then
        sldd_pid=`pidof -x $sldd_bin`
    fi

    if [ -n "${sldd_pid:-}" ] ; then
		 kill -9 ${sldd_pid} > /dev/null 2>&1
    fi

    $sldd_prog > /dev/null 2>&1 &
    sldd_pid=$!

    echo ${sldd_pid} > $sldd_pid_file
    # Sleep is needed in order to update local gid2lid cache file before running opensm
    sleep 3
}

stop_sldd()
{
    if [ -f $sldd_pid_file ]; then
            local line p
            read line < $sldd_pid_file
            for p in $line ; do
                    [ -z "${p//[0-9]/}" -a -d "/proc/$p" ] && sldd_pid="$sldd_pid $p"
            done
    fi

    if [ -z "$sldd_pid" ]; then
        sldd_pid=`pidof -x $sldd_bin`
    fi

    if [ -n "${sldd_pid:-}" ] ; then
        kill -15 ${sldd_pid} > /dev/null 2>&1
    fi

}

start()
{
    local OSM_PID=

    pid=""


    if [ -f $PID_FILE ]; then
            local line p
            read line < $PID_FILE
            for p in $line ; do
                    [ -z "${p//[0-9]/}" -a -d "/proc/$p" ] && pid="$pid $p"
            done
    fi

#    if [ -z "$pid" ]; then
#
#        pid=`pidof -o $$ -o $PPID -o %PPID -x $bin`
#    fi

    if [ -n "${pid:-}" ] ; then
        echo $"${bin} (pid $pid) is already running..."

    else

		 if [ -n "${HONORE_GUID2LID}" ]; then
		 		 # Run sldd daemod
		 		 start_sldd
		 fi

        # Start opensm
		     echo -n "Starting IB Subnet Manager for port $GUID."
        $prog --daemon ${HONORE_GUID2LID} ${OPTIONS} > /dev/null

        checkpid $(cat $PID_FILE)
        RC=$?
        [ $RC -eq 0 ] && echo_success || echo_failure
        [ $RC -eq 0 ] && touch /var/lock/subsys/opensm
		 echo

    fi
return $RC
}

stop()
{
    local pid=
    local pid1=
    local pid2=

    # Stop sldd daemon
    stop_sldd

#    if [ -f $PID_FILE ]; then
#            local line p
#            read line < $PID_FILE
#            for p in $line ; do
#                    [ -z "${p//[0-9]/}" -a -d "/proc/$p" ] && pid1="$pid1 $p"
#            done
#    fi
#
#    pid2=`pidof -o $$ -o $PPID -o %PPID -x $bin`
#
#    pid=`echo "$pid1 $pid2" | sed -e 's/\ /\n/g' | sort -n | uniq | sed -e 's/\n/\ /g'`
#
#    if [ -n "${pid:-}" ] ; then
#        # Kill opensm
#		 echo -n "Stopping IB Subnet Manager."
#        kill -15 $pid > /dev/null 2>&1
#		 		 cnt=0; alive=1
#        while [ $cnt -lt 6 -a $alive -ne 0 ]; do
#		 		 echo -n ".";
#		 		 alive=0
#		 		 for p in $pid; do
#		 		 		 if checkpid $p ; then alive=1; echo -n "-"; fi
#		 		 done
#		 		 let cnt++;
#		 		 sleep $alive
#		 done

    if [ -f $PID_FILE ]; then
    		 echo -n "Stopping IB Subnet Manager."
        for p in $(cat $PID_FILE)
        do
            while checkpid $p ; do
                kill -KILL $p > /dev/null 2>&1
                echo -n "+"
                sleep 1
            done
        done
        checkpid $pid
        RC=$?
        [ $RC -eq 0 ] && echo_failure || echo_success
		 echo
        RC=$((! $RC))
    else
		 echo -n "Stopping IB Subnet Manager for port $GUID."
        echo_failure
		 echo
        RC=1
    fi

    # Remove pid file if any.
    rm -f $PID_FILE
    rm -f /var/lock/subsys/opensm
    return $RC
}

status()
{
    local pid

    # First try "pidof"
    pid=`pidof -o $$ -o $PPID -o %PPID -x ${bin}`
    if [ -n "$pid" ]; then
            echo $"${bin} (pid $pid) is running..."
            return 0
    fi

     # Next try "/var/run/opensm.pid" files
     if [ -f $PID_FILE ] ; then
             read pid < $PID_FILE
             if [ -n "$pid" ]; then
                     echo $"${bin} dead but pid file $PID_FILE exists"
                     return 1
             fi
     fi
     echo $"${bin} is stopped"
     return 3
}



case $ACTION in
    start)
        for GUID in $(get_guids); do
            PID_FILE=/var/run/opensm.pid.$GUID
            touch $PID_FILE
            OPTIONS="--guid $GUID --pidfile $PID_FILE"
            start
	
	################# llatouche @ lenovo.com ################
	# Load the IB SRP kernel module and initiate/connect IB SRP storage devices	
        sleep 5
        # srp_discover
	########################################################
        done
        ;;

    stop)
        for GUID in $(get_guids); do
            PID_FILE=/var/run/opensm.pid.$GUID
            stop
        done
        ;;

    restart)
        #
        # re-invoking the init script ensures we get the full "case" behavior,
        # which unfortunately have the same names as the functions they invoke.
        # Ie.: case start) invokes the function 'start'.
        #
        $0 stop
        $0 start
        ;;

    status)
        status
        ;;

    condrestart)
        pid=`pidof -o $$ -o $PPID -o %PPID -x $bin`
        if [ -n "$pid" ]; then
            $0 stop
            sleep 1
            $0 start
        fi
        ;;

    *)
        echo
        echo "Usage: `basename $0` {start|stop|restart|status}"
        echo
        exit 1
        ;;
esac

RC=$?
exit $RC


