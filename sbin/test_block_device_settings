#!/usr/bin/perl -w

#
# 2012.09.19 Brian Elliott Finley <bfinley@us.ibm.com>
#   - The core of this I coopted from the command line from Scott
#     Denham.  Thanks, Scott!
# 2013.11.07 Brian Elliott Finley <bfinley@us.ibm.com>
#   - Turned into perl
# 2013.12.10 Brian Elliott Finley <bfinley@us.ibm.com>
#   - Added the --test option
#

#
# Use this script to verify that your storage nodes are using the
# desired settings for each block device. -BEF-
#
#   Example usage:
#
#       scp test_block_device_settings nsd1:/root/
#       ssh nsd1 ./test_block_device_settings
#

use strict;
use Getopt::Long;
use File::Basename;

my $progname = basename($0);
my $version_string = 'v' . '20.5';

GetOptions(
    "help"          => \my $help,
    "version"       => \my $version,
    "test"          => \my $test,
) or usage() and exit(1);

if ( defined $help ) {
    usage();
    print qq(\n-->  Try "$progname" with no options...\n\n);
    exit 0;
}

if ( defined $version ) {
    version();
    exit 0;
}

unless ( user_is_root() ) {
    usage();
    print qq(\n-->  Please run as root so that we can read all necessary kernel tables.);
    print qq(\n     You could try "sudo $progname" with no options...\n\n);
    exit 1;
}

unless ( defined $test ) {
    usage();
    print qq|\n-->  Try using the "--test" option (or "-t" for short).\n\n|;
    exit 1;
}



my %devices_by_friendly_name;
my %friendly_name_by_index;
my %dmsetup_info;
my $file;
my $cmd;

$cmd = 'dmsetup ls --target multipath';
open(INPUT,"$cmd|") or die("Couldn't run $cmd for input");
while(<INPUT>) {
    #
    # [root@x36n09 ~]# dmsetup ls --target multipath
    # dcs3700b_lun17  (253, 23)
    # dcs3700a_lun28  (253, 14)
    # dcs3700a_lun12  (253, 5)
    # dcs3700b_lun15  (253, 22)
    # dcs3700a_lun9   (253, 6)
    # dcs3700a_lun26  (253, 12)
    # dcs3700a_lun11  (253, 3)
    # dcs3700b_lun29  (253, 28)
    # mpatha  (253, 30)
    # dcs3700b_lun13  (253, 21)
    # dcs3700a_lun7   (253, 2)
    # dcs3700a_lun24  (253, 13)
    # dcs3700b_lun8   (253, 18)
    # dcs3700b_lun27  (253, 29)
    # dcs3700a_lun23  (253, 11)
    # dcs3700b_lun6   (253, 19)
    # dcs3700b_lun25  (253, 26)
    # dcs3700b_lun10  (253, 20)
    # dcs3700a_lun19  (253, 9)
    # dcs3700a_lun4   (253, 1)
    # dcs3700a_lun21  (253, 10)
    # dcs3700b_lun5   (253, 16)
    # dcs3700a_lun2   (253, 4)
    # dcs3700b_lun3   (253, 17)
    # dcs3700b_lun22  (253, 25)
    # dcs3700a_lun16  (253, 8)
    # dcs3700a_lun0   (253, 0)
    # dcs3700b_lun18  (253, 24)
    # dcs3700b_lun1   (253, 15)
    # dcs3700b_lun20  (253, 27)
    # dcs3700a_lun14  (253, 7)
    #
    chomp;

    if(m/^(\S+)\s+\((\d+),\s+(\d+)\)/) {

        my $device = $1;
        my $major  = $2;
        my $minor  = $3;

        $dmsetup_info{"$major:$minor"} = $device;
    }
}
close(INPUT);


$file = '/proc/partitions';
open(FILE,"<$file") or die("Couldn't open $file for reading");
while(<FILE>) {

    chomp;

    #
    # [root@x36n09 ~]# cat /proc/partitions  | head
    # major minor  #blocks  name
    #
    #    8        0   70311936 sda
    #    8       16 15623913472 sdb
    #    8       32 15623913472 sdc
    #
    if(m/(\d+)\s+(\d+)\s+\d+\s+(\S+)/) {
        my $major  = $1;
        my $minor  = $2;
        my $device = $3;

        my $friendly_name;

        if($device =~ m/^dm-/) {

            #
            # If we have no major/minor, then don't even mess with it.
            #
            next unless(defined $dmsetup_info{"$major:$minor"});

            $friendly_name = $dmsetup_info{"$major:$minor"};

        } else {

            $friendly_name = $device;
        }

        $devices_by_friendly_name{$friendly_name} = $device;
	

        #
        # Take a device name, like dcs3700a_lun2 which sorts after
        # dcs3700a_lun10, and before dcs3700b_lun1.
        #
        #   dcs3700b_lun1  => dcs3700_lun1000001
        #   dcs3700a_lun2  => dcs3700_lun1000002
        #   dcs3700a_lun10 => dcs3700_lun1000010
        #
        # If it's just an /dev/sda3 device, then handle it also.
        #
        my $index = $friendly_name;
        $index =~ s/[ab]_lun/_lun/;
        if( $index =~ m/(\d+)$/ ) {
            my $new_digits = $1 + 1000000;
            $index =~ s/(\d+)$/$new_digits/;
        }

        #
        # Now we pre-pad the index value, so that sdb comes before sdaa when
        # sorted later.
        #
        $index = sprintf('%1000s', $index);

        $friendly_name_by_index{$index} = $friendly_name;
    }
}
close(FILE);


print "friendly_name max_sectors_kb nr_requests read_ahead_kb queue_depth scheduler\n\n";
foreach my $index_key (sort keys %friendly_name_by_index) {

    my $friendly_name = $friendly_name_by_index{$index_key};

    my $device = $devices_by_friendly_name{$friendly_name};

    print "$friendly_name";

    foreach my $file (
        "/sys/block/$device/queue/max_sectors_kb", 
        "/sys/block/$device/queue/nr_requests",
        "/sys/block/$device/queue/read_ahead_kb",
        "/sys/block/$device/device/queue_depth",
        "/sys/block/$device/queue/scheduler",
                                                ) {

        if( ! -e $file ) {
            print "  N/A";
            next;
        }
        open(FILE,"<$file") or die("Couldn't read $file");
        while(<FILE>) {
            chomp;
            print "  $_";
        }
        close(FILE);
    }

    print "\n";
}


########################################################################
#
#   BEGIN Subroutines
#

sub version {
    print qq(\n);
    print qq($progname $version_string\n);
    print qq(\n);
    print qq(    Part of the "gpfs_goodies" package\n);
    print qq(\n);

    return 1;
}

sub usage {
version();
print << "EOF";

This program will summarize key block device settings that impact the
performance when accessing your disk subsystems.  It makes no changes to
your system, and is safe to run on live production systems.

Usage:  $progname [OPTION...]

    All options can be abbreviated to minimum uniqueness.

    --help

        Show this help output.

    --version

        Yup.  These are the only two options. ;-)

    --test

        Perform the test.  This should be considered a safe action.


    Support: 
    
        This software is provided as-is, with no express or implied
        support.  However, the author would love to receive your
        patches.  Please contact Brian E. Finley <bfinley\@us.ibm.com>
        with patches and/or suggestions.


EOF
    return 1;
}

sub user_is_root {

    if($< == 0) { 
        return 1; 
    }
    return undef;
}


#
#   END Subroutines
#
########################################################################

