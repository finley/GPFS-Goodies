#!/usr/bin/perl -w

#
# gpfs_stanzafile-creator
#

#
#   2014.05.23 Brian Elliott Finley <bfinley@us.ibm.com>
#   - Created for demo at Edge2014
#   2014.07.01 Brian Elliott Finley <bfinley@us.ibm.com>
#   - Improved help output and options validation
#   2014.07.09 Brian Elliott Finley <bfinley@us.ibm.com> & Lerone Latouche <latouche@us.ibm.com>
#   - Identified and fixed bug where remote commands were not properly
#     escaped
#

use strict;
use Getopt::Long;
use File::Basename;

my $progname = basename($0);
my $version_number = '20.8.3';
my @output;
my %disks_by_raid_controller;
my $disk_regex = '(.*[ab])_lun[0-9]+';

GetOptions(
    "help"                  => \my $help,
    "version"               => \my $version,
    "sg|server-group=s"     => \my @server_groups,
    "paths=s"               => \my $paths,
    "out-file=s"            => \my $out_file,
    "v|verbose"             => \my $verbose,
) or usage() and exit(1);

if ( defined $help ) {
    usage();
    exit 0;
}

if ( defined $version ) {
    version();
    exit 0;
}

if( ! @server_groups ) {
    usage();
    print "--> Please try --server-group\n\n";
    exit 1;
}

if( ! defined $out_file ) {
    $out_file = get_tmp_file();
}

if( ! defined $paths ) {
    $paths = 2;
}


########################################################################
#
#   BEGIN main
#
foreach my $servers (@server_groups) {
    create_stanza_chunk($servers);
}

write_stanza_file($out_file);

print "\nYour new file: $out_file\n\n";

exit 0;

#
#   END main
#
########################################################################


########################################################################
#
#   BEGIN subroutines
#
sub write_stanza_file {

    my $file = shift;

    open(FILE,">$file") or die("Couldn't open $file for writing");
    print FILE "#\n";
    print FILE "#  Created by $progname\n";
    print FILE "#\n";
    print FILE "\n";
    print FILE @output;
    close(FILE);

    return 1;
}


sub create_stanza_chunk {

    my $servers = shift;

    # ssh to server(s) and get lun list
            my @disks = (
                "/dev/mapper/Tahoeab_lun0",
                "/dev/mapper/Tahoeab_lun1",
                "/dev/mapper/Tahoeab_lun2",
                "/dev/mapper/Tahoeab_lun3",
                "/dev/mapper/Tahoeab_lun4",
                "/dev/mapper/Tahoeab_lun5",
                "/dev/mapper/Tahoeab_lun6",
                "/dev/mapper/Tahoeab_lun7",
                "/dev/mapper/Tahoeab_lun8",
                "/dev/mapper/Tahoeab_lun9",
                "/dev/mapper/Tahoeab_lun10",
                "/dev/mapper/Tahoeab_lun11",
                "/dev/mapper/Tahoeab_lun12",
                "/dev/mapper/Tahoeab_lun13",
                "/dev/mapper/Tahoeab_lun14",
                "/dev/mapper/Tahoeab_lun15",
                "/dev/mapper/Tahoeab_lun16",
                "/dev/mapper/Tahoeab_lun17",
            );


    foreach my $disk (@disks) {
    
        my $nsdname = basename $disk;
        $nsdname =~ m/$disk_regex/;

        my $raid_controller = $1;

        push @{$disks_by_raid_controller{$raid_controller}}, $disk;
    }


    my $path_count = 0;
    while( %disks_by_raid_controller ) {

        foreach my $raid_controller (sort keys %disks_by_raid_controller) {

            print "\$raid_controller $raid_controller\n" if($verbose);

            my $disk = shift @{$disks_by_raid_controller{$raid_controller}};
            print "  \$disk $disk\n" if($verbose and $disk);
            if(defined $disk) {

                my $nsdname = basename $disk;
                $nsdname =~ m/$disk_regex/;

                push @output, "%nsd: device=$disk  nsd=$nsdname  servers=$servers\n";

                $path_count++;

            } else {

                delete $disks_by_raid_controller{$raid_controller};
            }
        }

        #
        # Make sure each server is assigned one lun per path each
        # go-round
        #
        if( $path_count >= $paths ) {
            $servers = list_shift($servers);
            $path_count = 0;
        }
    }


    return 1;
}


sub list_shift {

    my $servers = shift;

    my ($firstling, $remainder) = split(/,/, $servers, 2);

    # And the first shall be last...
    return "$remainder,$firstling";
}


sub usage {
version();
print << "EOF";
Description:

    $progname will auto-create a GPFS StanzaFile that will appropriately
    balance NSD device access across your NSD servers for best
    performance.  
    
    The resultant StanzaFile can be used as-is with the mmcrnsd command,
    and should provide balanced NSD device access from clients (good
    performance) if the following assumptions are true:

        That each group of NSD servers specified with each
        --server-group argument:
           
        a) have access to all of the same shared disk devices

        b) have been prepared for multipath use with the GPFS Goodies
           multipath.conf-creator tool

    If the assumptions above are not true for your environment, you may
    need to hand edit the StanzaFile before use.  If you find you need
    to do this, please email the author(s) with before and after copies
    of your StanzaFile, and any other relevant details, and we will try
    to improve the tool to handle your situation in a future release.
    
    If you are satisfied with the StanzaFile you've created, you can use
    mmcrnsd to initialize the disks (see "man mmcrnsd" for more details):

        mmcrnsd -F GPFS_Goodies.StanzaFile

    Have fun!  -Brian Finley


Usage:  $progname [OPTION...] --servers SERVER[,SERVER,...]

    Options can be abbreviated to minimum uniqueness.  For example, you 
    could use "-h" or "--h" instead of "--help".

    --help

    --version

    -sg, --server-group SERVER[,SERVER,...]

        A comma delimited list of servers that are all connected to the
        same multi-pathed disk subsystem(s) (a building block).  Make
        sure that you use the names of the servers as they appear in the
        'Admin node name' column of the output from the 'mmlscluster'
        command.

        May be specified multiple times if you have multiple building
        blocks.

        Example:  --sg nsd1,nsd2 --sg nsd3,nsd4 --sg nsd5,nsd6
             or:  --server-group s1,s2,s3 --server-group s4,s5,s6


    --paths N
        
        Number of paths each server has to each disk.  
        
        For example, if each server has 2x cables connected to each disk
        subsystem, then you would specify 2.  

        Default:  2


    --out-file FILE

        Where FILE is the name you want to use for your shiny new
        multipath.conf file.

        Default:  I'll choose one for you and tell you what I've named it.

        Example:  --out-file /tmp/$progname.StanzaFile


    Support: 
    
        This software is provided as-is, with no express or implied
        support.  However, the author would love to receive your
        patches.  Please contact Brian E. Finley <bfinley\@us.ibm.com>
        with patches and/or suggestions.

        To request support for an additional storage subsystem, please
        email the output from 'lsscsi' to <bfinley\@us.ibm.com>.  Emails
        that have an actual storage subsystem attached (or at least
        remote access to one) are likely to get the most attention. ;-)


EOF
    return 1;
}

sub get_tmp_file {

    my $file;

    my $template_base = '/tmp/gpfs_goodies.StanzaFile';
    my $cmd = qq(mktemp $template_base.XXX);

    open(INPUT,"$cmd|") or die("Couldn't run $cmd for input");
    while(<INPUT>) {
        if( m#^($template_base.*)# ) {
            $file = $1;
        }
    }
    close(INPUT);

    return $file;
}

sub version {
    print qq(\n);
    print qq($progname v$version_number\n);
    print qq(\n);
    print qq(    Part of the "gpfs_goodies" package\n);
    print qq(\n);

    return 1;
}

#
#   END subroutines
#
########################################################################

