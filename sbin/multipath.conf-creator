#!/usr/bin/perl -w

#
#   "multipath.conf-creator"
#

#
#   Originally created by: Jarrod Johnson <jbjohnso@us.ibm.com> as "getluns.pl"
#   
#   2012.10.16 Brian Elliott Finley <bfinley@us.ibm.com>
#   - added invocation options and help output
#   2012.10.18 Brian Elliott Finley <bfinley@us.ibm.com>
#   - added additional info in resultant configuration
#   2013.02.14 Brian Elliott Finley <bfinley@us.ibm.com>
#   - added blacklist feature
#   2013.06.14 Brian Elliott Finley <bfinley@us.ibm.com>
#   - modify blacklist to use vendor/product info instead of disk name
#   2013.07.18 Brian Elliott Finley <bfinley@us.ibm.com>
#   - add section entries for DCS3700 and DS35xx subsystems
#   - handle case where subsystem name has spaces
#   - handle case where SMCli or subsystem doesn't return a "lun number"
#   2013.09.22 Brian Elliott Finley <bfinley@us.ibm.com>
#   - add --version output
#   2013.11.06 Brian Elliott Finley <bfinley@us.ibm.com>
#   - use proper grammar for plural and singular controller(s)
#   - improve regex used to identify controller name
#   - incorporate numerous additional controllers in the multipath.conf
#     devices section
#   2013.11.07 Brian Elliott Finley <bfinley@us.ibm.com>
#   - test for existence of SMcli
#   2013.11.19 Brian Elliott Finley <bfinley@us.ibm.com>
#   - improve --help verbiage
#   2014.07.14 Brian Elliott Finley <bfinley@us.ibm.com> & Christian Caruthers <christian.caruthers@us.ibm.com>
#   - Identify and fix bug in handling device names that include hyphens
#


use strict;
use Socket;
use Getopt::Long;
use File::Basename;

my $progname = basename($0);
my $version_number = '20.8.3';

GetOptions(
    "help"          => \my $help,
    "version"       => \my $version,
    "auto-detect"   => \my $auto_detect,
    "out-file=s"    => \my $out_file,
    "deploy=s"      => \my $deploy,
    "dry-run"       => \my $dry_run,
    "no-blacklist"  => \my $no_blacklist,
    "v|verbose"     => \my $verbose,
) or usage() and exit(1);

if ( defined $help ) {
    usage();
    exit 0;
}

if ( defined $version ) {
    version();
    exit 0;
}

unless ( user_is_root() ) {
    usage();
    print qq(\n-->  Please run as root\n\n);
    exit 1;
}

if( ! defined $auto_detect and ! defined $ARGV[0] ) {
    usage();
    print "\n";
    print qq(-->  Make sure you specify one of "--auto-detect" or "a list of subsystems".\n);
    print "\n";
    exit 1;
} 

#if( defined $blacklist and (($blacklist =~ m/^\-+n/) or (defined $no_blacklist)) ) {
#    usage();
#    print "\n";
#    print qq(-->  You can specify either "--blacklist" or "--no-blacklist" but not both."\n);
#    print "\n";
#    exit 1;
#} 

if( ! defined $out_file ) {
    $out_file = get_tmp_file();
}

my $smcli = which("SMcli");
if( ! defined $smcli ) {
    usage();
    print "\n";
    print qq(-->  I can't find SMcli.  Please make sure that the IBM DS Storage Manager\n);
    print qq(     software is installed, and is in your path.\n);
    print "\n";
    exit 1;
}



#my @blacklist_devices;
#if( defined $no_blacklist ) {
#    undef @blacklist_devices;
#
#} elsif( defined $blacklist ) {
#    @blacklist_devices = split(/,/, $blacklist);
#
#} else {
#    # If we got to here, then we default to adding sda to the blacklist
#    @blacklist_devices = 'sda';
#}


my @subsystems;
if( defined $auto_detect ) {
    my $cmd = "SMcli -d";
    open(INPUT,"$cmd|") or die("Couldn't run $cmd for input.");
    while(<INPUT>) {
        if(m/^There are currently no storage systems listed/) {
            print << 'EOF';

There are currently no storage systems listed in the configuration file. Add
storage systems using the Add Storage System option in the storage management
software or by command line.
                                           
Perhaps try running 'SMcli -A' to have SMclient auto-discover your storage
subsystems.  That would look something like this:

    [root@disktree ~]# SMcli -A
    Starting auto discovery.
    ........................................................................
    ..........................
    Auto discovery operation successful.
    SMcli completed successfully.


Then try running this command again. :-)

EOF
            exit 2;
        }

        next if(m/^SMcli completed successfully/);
        next if(m/^(\s|$)/);

        if( m/^(\S+)\s+.*/ ) {
            my $subsystem = $1;
            push @subsystems, $subsystem;
        };
    }
    close(INPUT);
} else {
    push @subsystems, @ARGV;
}

my $quantity = scalar @subsystems;

my $plural = "";
if( $quantity ne 1 ) { 
    $plural = 's';
}

print "\nLooks like we're dealing with $quantity subsystem$plural. Let's get going:\n\n";

my %aliases;
foreach my $subsystem (@subsystems) {
    get_subsystem_info("$subsystem");
}


sub get_subsystem_info {

    my $subsystem = shift;

    print qq(  Detecting API for "$subsystem") if($verbose);
    my $api = detect_subsystem_api("$subsystem");
    print " -> $api\n" if($verbose);

    print qq(  Querying "$subsystem"\n);
    if($api eq 'SMcli') {
        get_subsystem_info_via_SMcli("$subsystem");
    }
    elsif($api eq 'IBM FlashSystem') {
        get_subsystem_info_via_IBM_FlashSystem("$subsystem");
    }

    return 1;
}


sub detect_subsystem_api {

    my $subsystem = shift;

    if($auto_detect) { return 'SMcli'; }

    my $ip = hostname2ip($subsystem);
    if(! $ip) {

        usage();
        print "  WARNING:  I couldn't find an IP address for $subsystem\n";
        print "\n";
        print "    Hint --> Are you sure that's the right hostname?\n";
        print "\n";

        exit 1;
    }

    my $cmd;
    $cmd = "ping -c 1 $ip >/dev/null 2>&1";
    !system($cmd) or die("Couldn't run command: $cmd");

    $cmd = "ip neigh";
    open(INPUT,"$cmd|") or die("Couldn't run $cmd for input");
    while(<INPUT>) {
        #
        #   Example input
        #
        # 10.72.15.65 dev ib0 lladdr a0:00:01:00:fe:80:00:00:00:00:00:00:50:05:07:00:5b:00:f9:a5 STALE
        # 10.70.17.7 dev bond-10g lladdr 6c:ae:8b:08:2e:78 DELAY
        # 10.70.17.61 dev bond-10g lladdr 6c:ae:8b:08:34:84 STALE
        # 10.70.11.30 dev bond-10g lladdr 6c:ae:8b:08:35:7a STALE
        # 10.70.20.40 dev bond-10g lladdr 6c:ae:8b:08:2e:60 STALE
        # 10.72.13.17 dev ib0 lladdr a0:00:01:00:fe:80:00:00:00:00:00:00:50:05:07:00:5b:01:00:91 STALE
        #
        if(m/^$ip\s+dev\s+\S+\s+lladdr\s+(\S+)\s+/) {
            #                             ^^^ 
            #                              |
            #                              mac address of the subsystem
            #
            my $mac = $1;

            #
            # We've matched the subsystem's IP and grabbed it's MAC, now let's dig deeper
            if($mac =~ m/^00:20:c2/) {
                return 'IBM FlashSystem';
            }
        }
    }
    close(INPUT);

    # Assume SMcli for everything else (which may be incorrect, but
    # we'll know soon enough. ;-)
    return 'SMcli';
}


sub get_subsystem_info_via_IBM_FlashSystem {

    my $subsystem = shift;

    my @input = ();
    my @lun_names;
    my $file;
    my $cmd;
    my %lun_numbers_by_lun_name;

    ########################################################################
    #
    #   BEGIN get list of luns
    #
    $file = get_tmp_file();
    open(FILE,">$file") or die("Couldn't open $file for writing");

        print FILE  q|set timeout -1                                  | . qq|\n|;
        print FILE  q|spawn $env(SHELL)                               | . qq|\n|;
        print FILE  q|match_max 100000                                | . qq|\n|;
        print FILE qq|send -- "telnet $subsystem\r"                  | . qq|\n|;
        print FILE  q|expect " login:"                                | . qq|\n|;
        print FILE  q|send -- "admin\r"                               | . qq|\n|;
        print FILE  q|expect "Password:"                              | . qq|\n|;
        print FILE  q|send -- "password\r"                            | . qq|\n|;
        print FILE  q|expect "admin #:"                               | . qq|\n|;
        print FILE  q|send -- "lu\r"                                  | . qq|\n|;
        print FILE  q|expect "admin #:"                               | . qq|\n|;

    close(FILE);

    $cmd = "expect -f $file";
    open(INPUT,"$cmd|") or die $!;
    while(<INPUT>) {
        push @input, (<INPUT>);
    }
    close(INPUT);
    unlink $file;

    #
    # Example input:
    #
    #   admin #: lu
    #
    #   ------------------------------Storage Information-----------------------------
    #   Total Size:   18.75 TiB
    #   Free Space:   23.97 GiB
    #   Storage Mode: RAID 5
    #
    #   ------------------------------Logical Unit Table------------------------------
    #
    #   --------------Name-------------- --Number-- --State-- ---Size--- --Log Lun--
    #   fs820-3_lun0                     0          Good        3.12 TiB no
    #   fs820-3_lun1                     1          Good        3.12 TiB no
    #   fs820-3_lun2                     2          Good        3.12 TiB no
    #   fs820-3_lun3                     3          Good        3.12 TiB no
    #   fs820-3_lun4                     4          Good        3.12 TiB no
    #   fs820-3_lun5                     5          Good        3.12 TiB no
    #

    #
    # Skip past the cruft at the top
    #
    while(@input) {

        $_ = shift @input;

        last if(m/^--------------Name--------------/);
    }

    #
    # Now gather the actual LUN names
    #
    while(@input) {

        $_ = shift @input;
        if( m/^\S+/ ) {

            my $lun_name = substr($_, 0, 32);    # We have to do it this way, as lun names may contain spaces.
            $lun_name =~ s/\s+$//;               # Then we strip off any trailing spaces...

            my $lun_number = substr($_, 33, 10);
            $lun_number =~ s/\s+$//;

            push @lun_names, $lun_name;
            $lun_numbers_by_lun_name{$lun_name} = $lun_number;
        }

        last if( m/^(\s+|$)/ );
    }

    #
    #   END get list of luns
    #
    ########################################################################

    ########################################################################
    #
    #   BEGIN get lun info
    #

    $file = get_tmp_file();
    open(FILE,">$file") or die("Couldn't open $file for writing");

        print FILE  q|set timeout -1                                  | . qq|\n|;
        print FILE  q|spawn $env(SHELL)                               | . qq|\n|;
        print FILE  q|match_max 100000                                | . qq|\n|;
        print FILE qq|send -- "telnet $subsystem\r"                  | . qq|\n|;
        print FILE  q|expect " login:"                                | . qq|\n|;
        print FILE  q|send -- "admin\r"                               | . qq|\n|;
        print FILE  q|expect "Password:"                              | . qq|\n|;
        print FILE  q|send -- "password\r"                            | . qq|\n|;

        foreach my $lun_name (@lun_names) {
            print FILE  q|expect "admin #:"                               | . qq|\n|;
            print FILE  q|send -- "lu scsi_id \"| . $lun_name . q|\"\r"   | . qq|\n|;
        }

        print FILE  q|expect "admin #:"                               | . qq|\n|;

    close(FILE);

    @input = ();
    $cmd = "expect -f $file";
    open(INPUT,"$cmd|") or die $!;
    while(<INPUT>) {
        push @input, (<INPUT>);
    }
    close(INPUT);
    unlink $file;

    #
    #   END get lun info
    #
    ########################################################################

    ########################################################################
    #
    #   BEGIN format stanzas
    #
    my $lun_name;
    my $wwid;
    my $key;
    while(@input) {
        #
        #   Input looks like:
        #
        # flashctl1-a login: admin
        # Password: 
        # 
        # IBM - Intelligent Cluster
        # FlashSystem-820 Management Interface
        # 
        #     Firmware Version:        6.3.1
        #     Storage Capacity:        9.37 TiB    
        #     Management Controller:   mc-1
        #     Eth0 IP Address:         10.73.1.23
        #     Hostname:                flashctl1-a
        #     Chassis Serial:          T-6A2C
        # 
        # 
        # admin #: lu scsi_id "LogicalUnit 0"
        # 
        # Page: 83
        # Type: 2
        # ID:   00 20 c2 40 00 14 6a 2c
        # 
        # admin #: lu scsi_id "LogicalUnit 1"
        # 
        # Page: 83
        # Type: 2
        # ID:   00 20 c2 40 01 14 6a 2c
        # 
        # admin #: lu scsi_id "LogicalUnit 2"
        # 
        # Page: 83
        # Type: 2
        # ID:   00 20 c2 40 02 14 6a 2c
        # 
        # admin #: lu scsi_id "LogicalUnit 3"
        # 
        # Page: 83
        # Type: 2
        # ID:   00 20 c2 40 03 14 6a 2c
        # 
        # admin #: #                                            

        $_ = shift @input;

        if( m/^admin #: lu scsi_id "(.*)"/ ) {

            $lun_name = $1;

            $key = "${subsystem}_${lun_name}";

            $aliases{$key}->{subsystem} = $subsystem;
            $aliases{$key}->{lun_name} = $lun_name;
            $aliases{$key}->{lun_number} = $lun_numbers_by_lun_name{$lun_name};

        }
        elsif( m/^Type:\s+(\d+)/ ) {

            #
            # Now we've got Type:
            #
            my $type = $1;

            #
            # Now get ID:
            #
            $_ = shift @input;
            m/^ID:\s+(.*)/;
            my $id = $1;
            $id =~ s/\s+//g;

            #
            # Take the Type (2) and append the ID (00 20 c2 40 00 14 bd 28)
            #                ^                        ^                  ^
            #                |                        |                  |
            #                ^-------------------v  v-^          v-------^
            #                                    |  |            |
            #                                    v  v            v
            # $wwid should end up looking like:  20020c2400014bd28
            #
            $wwid = $type . $id;

            $aliases{$key}->{wwid} = $wwid;
            $aliases{$key}->{owner} = "ab";   # There is no preferred owner with IBM FlashStorage, so we say they both own it
        }
    }

    #
    #   END format stanzas
    #
    ########################################################################

    return 1;
}


sub get_subsystem_info_via_SMcli {

    my $subsystem = shift;

    my $lun_name;
    my $key;

    my $cmd = qq(SMcli -n "$subsystem" -c 'show logicalDrives;');
    open(INPUT,"$cmd|") or die("Couldn't run $cmd for input.");
    while(<INPUT>) {

        #
        # Get the LUN's Name (from the SMclient perspective)
        #
        if (/Logical Drive name:\s*(\S*)/) {

            my $lun_name = $1;

            $key = "${subsystem}_${lun_name}";

            $aliases{$key}->{subsystem} = $subsystem;
            $aliases{$key}->{lun_name} = $lun_name;

        }
        #
        # Get the LUN's WWID
        #
        elsif (/Logical Drive ID:\s*(\S*)/) {

            my $wwid = $1;

            $wwid =~ s/^/3/;
            $wwid =~ s/://g;

            $aliases{$key}->{wwid} = $wwid;

        }
        #
        # Get the LUN's ID (Instance number -- Ie.: lun0)
        #
        elsif (/LUN:\s*(\S*)/) {

            my $lun_number = $1;

            $aliases{$key}->{lun_number} = $lun_number;

        }
        #
        # Get the LUN's SSID
        #
        elsif (/\s+Subsystem ID \(SSID\):\s+(\d+)/) {

            my $ssid = $1;

            $aliases{$key}->{ssid} = $ssid;

        }
        #
        # Get the LUN's ownership (at the raid controller level) 
        #
        elsif (/Preferred owner:.*slot\s*(\S*)/) {

            my $owner = lc($1);

            $aliases{$key}->{owner} = $owner;

        }

    }
    close(INPUT);
}


########################################################################
#
# BEGIN write out the multipath.conf file
#
my $file = $out_file;
open(FILE,">$file") or die("Couldn't open $file for writing");

print FILE << "EOF";
#
#   /etc/multipath.conf
#
#   Created by $progname v$version_number, which is part of the
#
#   "gpfs_goodies" package which can be found at http://snurl.com/gpfs_goodies
#
EOF

my $chunk = '/etc/gpfs_goodies/multipath.conf-creator_config_chunks/defaults';
if( -e "$chunk" ) {
    open(CHUNK,"<$chunk") or die("Couldn't open $chunk for reading");
    print FILE (<CHUNK>);
    close(CHUNK);
}

print FILE qq(\n);

#
# Blacklist entries
#
unless(defined $no_blacklist) {

    my @blacklist_entries;
    push @blacklist_entries, 'LSI,Logical Volume';
    push @blacklist_entries, '*,Universal Xport';

    #
    # How to determine which device to blacklist on a node:
    #
    #   Figure out which device is your root device (sda in this case)
    #   and use lsscsi to find out how it's classified.  Pay attention
    #   to the vendor and product information as indicated below.  These
    #   are the two pieces we use to blacklist root devices across a
    #   class of machines (Ie.: all of your storage servers with the
    #   exact same hardware configuration).
    #
    #   [root@storage06 ~]# lsscsi  | grep -w sda
    #   [0:1:0:0]    disk    LSI      Logical Volume   3000  /dev/sda 
    #
    #                        ^^^      ^^^^^^^^^^^^^^
    #                         |         |
    #                         |         --- product 
    #                         --- vendor
    #
    # XXXX Note to self: at some point, accept a user provided blacklist
    # entry of the form:
    #
    #   --blacklist "vendor,product"
    #   --blacklist "LSI,Logical Volume" --blacklist "MyRaid,Illogical Volume"
    #

    print FILE qq(blacklist {\n);
    foreach my $entry (@blacklist_entries) {
        my ($vendor, $product) = split(/,/, $entry, 2);

        print FILE qq(    device {\n);
        print FILE qq(        vendor    "$vendor"\n);
        print FILE qq(        product   "$product"\n);
        print FILE qq(    }\n);

    }

    print FILE qq(}\n);
    print FILE qq(\n);
}

########################################################################
#
#   BEGIN devices
#

print FILE << 'EOF';
#
#   For references on many of these entries, please see:
#
#       The "IBM System Storage DS Storage Manager Version Installation and Host Support Guide.pdf"
#        (which can be found at: https://ibm.biz/Bdxk4t)
#
devices {

EOF

my $dir = '/etc/gpfs_goodies/multipath.conf-creator_config_chunks/';
opendir(my $dh, $dir) || die "can't opendir $dir: $!";
my @chunks = grep { /^device-/ && -f "$dir/$_" } readdir($dh);
closedir $dh;

foreach(@chunks) {
    $chunk = "$dir/$_";
    if( -e "$chunk" ) {
        open(CHUNK,"<$chunk") or die("Couldn't open $chunk for reading");
        print FILE (<CHUNK>);
        close(CHUNK);
    }
    print FILE "\n";
}

print FILE "}\n";
print FILE "\n";

#
#   END devices
#
########################################################################

    
#
# Multipath entries
#
print FILE qq(multipaths {\n);
foreach my $key (sort keys %aliases) {


    # multipath {
    #   # Controller Name:  pershing-ctrl-14-3
    #   # Raid Controller:  a
    #   # LUN Name:         PA14_3_0
    #   # LUN Number:       0
    #   wwid  360080e50002e34b8000002fd506c631e
    #   alias pershing_ctrl_14_3a_lun0
    # }

    my $subsystem = $aliases{$key}->{subsystem};
    my $owner = $aliases{$key}->{owner};
    my $lun_name = $aliases{$key}->{lun_name} if( defined $aliases{$key}->{lun_name} );
    my $lun_number = $aliases{$key}->{lun_number} if( defined $aliases{$key}->{lun_number} );
    my $ssid = $aliases{$key}->{ssid} if( defined $aliases{$key}->{ssid} );

    my $lun;
    if(defined $lun_number) {
        $lun = $lun_number;
    } else {
        $lun = $ssid;
    }

    my $alias = "${subsystem}${owner}_lun${lun}";

    my $wwid = $aliases{$key}->{wwid};

    #
    # (10:18:23 AM) Scott Fadden (GPFS): 
    # typeset bannedFromDeviceNames='/?$&*()'   
    # typeset bannedFromDiskNames='.<>{}/?`~!@#$%^&*()+=-' 
    #
    # GPFS Doesn't like hyphens in NSD disk names
    #
    $alias =~ s/-/_/g;
    #
    # And spaces introduced (perhaps by a subsystem name) are right
    # out!
    #
    $alias =~ s/ /_/g;

    print FILE "    multipath {\n";
    print FILE "        #\n";
    print FILE "        # Controller Name:      $subsystem\n";
    print FILE "        # Raid Controller:      $owner\n";
    print FILE "        # LUN Name:             $lun_name\n"    if( defined $lun_name);
    print FILE "        # LUN Number:           $lun_number\n"  if( defined $lun_number);
    print FILE "        # Subsystem ID (SSID):  $ssid\n"    if( defined $ssid);
    print FILE "        #\n";
    print FILE "        alias $alias\n";
    print FILE "        wwid  $wwid\n";
    print FILE "    }\n";
}

print FILE "}\n";
close(FILE);
#
# END write out the multipath.conf file
#
########################################################################

print "\n";
print "  done!\n";
print "\n\n";
print "You can find your fresh multipath.conf file here:\n";
print "\n";
print "  $out_file\n";
print "\n";

if( defined $deploy ) {

    print "\n";
    my @servers = split(/,/, $deploy);

    foreach my $server (sort @servers) {

        my $cmd;
        my $file;

        #my $OS = determine_server_os($server);
        my $OS = "RHEL6";

        print "Processing ${server}...\n\n";
        if( $dry_run ) {

            print "  I'm in --dry-run mode so I won't do anything, but here are the commands I would\n";
            print "  normally run:\n\n";

        }

        # Copy out config
        $cmd = "scp $out_file $server:/etc/multipath.conf";
        $cmd =~ s|/+|/|g;
        print "  $cmd\n";
        unless( $dry_run ) {
            !system( "$cmd >/dev/null" ) or die("Couldn't run $cmd");
        }

        # Copy out nsddevices
        $file = "/var/mmfs/etc/nsddevices";
        $cmd = "scp /usr/share/gpfs_goodies/$file $server:$file";
        $cmd =~ s|/+|/|g;
        print "  $cmd\n";
        unless( $dry_run) {
            !system( "$cmd >/dev/null" ) or die("Couldn't run $cmd");
        }

        $file = "/etc/modprobe.d/scsi_dh_alua.conf";
        $cmd = "scp /usr/share/gpfs_goodies/$file $server:$file";
        $cmd =~ s|/+|/|g;
        print "  $cmd\n";
        unless( $dry_run) {
            !system( "$cmd >/dev/null" ) or die("Couldn't run $cmd");
        }

        # Start it all up.  Should we also do an mmnsddiscover here?
        $cmd = qq(ssh $server ) . q("
            chkconfig multipathd on
            service multipathd start 
            multipathd -k'reconfigure'
            multipathd -k'reconfigure'
            chmod 755 /var/mmfs/etc/nsddevices
            chown root.root /var/mmfs/etc/nsddevices
            test -e /boot/initramfs-\$(uname -r).img.orig || rsync -a /boot/initramfs-\$(uname -r).img /boot/initramfs-\$(uname -r).img.orig
            dracut -f /boot/initramfs-\$(uname -r).img \$(uname -r)
            ls -l /boot/initramfs-\$(uname -r).img /boot/initramfs-\$(uname -r).img.orig
        ");
        $cmd =~ s|/+|/|g;

        print "  $cmd\n";
        unless( $dry_run) {
            #!system( $cmd ) or die("Couldn't run $cmd");
            !system( "$cmd >/dev/null" ) or die("Couldn't run $cmd");
        }

        print "  done!\n\n";

    }



} else {
    print << 'EOF';

Consider trying the "--deploy" option.  It will install your new multipath.conf
file on your storage servers, and complete the steps necessary to enable
multipath support.  If you're unsure, you can run it with the "--dry-run"
option, and I'll show you the commands that I would have run.

See "--help" for details.

EOF
}

exit 0;
                                                                
########################################################################
#
#   BEGIN Subroutines
#
sub version {
    print qq(\n);
    print qq($progname v$version_number\n);
    print qq(\n);
    print qq(    Part of the "gpfs_goodies" package\n);
    print qq(\n);

    return 1;
}

sub usage {
version();
print << "EOF";
Usage:  $progname [OPTION...] [--auto-detect | subsystem1 subsystem2...]

    Options can be abbreviated to minimum uniqueness.  For example, you 
    could use "-h" or "--h" instead of "--help".

    --help

    --version

    --auto-detect

        Highly recomended!

        This command will use the output from "SMcli -d" to determine the list
        of subsystems to use.  
        
        If you _don't_ specify this option, you'll need to specify a list of
        subsystems on the command line instead:

          $progname subsystem1 subsystem2 etc...


    --deploy SERVER[,SERVER,...]

        Install the following files on each specified server:
        
          - /etc/multipath.conf
             The file generated by this tool.
        
          - /etc/modprobe.d/scsi_dh_alua.conf
             Reduce boot time when connected to multipath devices, and eliminate
             some harmless, but noisy SCSI errors that may be displayed. 
        
          - /var/mmfs/etc/nsddevices
             Tells GPFS to use your new multipath devices as NSD disks (and to
             not use any other devices).  Once installed, just run it as a
             script to see which devices it's choosing.
        
	I'll also re-build the initrd or initramfs to include your new
	multipath.conf and scsi_dh_alua.conf files.


    --out-file FILE

        Where FILE is the name you want to use for your shiny new
        multipath.conf file.

        Default:  I'll choose one for you and tell you what I've named it.

        Example:  --out-file /tmp/multipath.conf.test_run


    --no-blacklist

        Don't blacklist any disks.  By default, this tool will create a
        multipath.conf file that blacklists the local disks.  
        
        Please verify before rebooting your nodes by running 
        'multipath -v3' and examining the output for blacklisted devices.


    Currently Supported Storage Controllers should include all IBM DS
    Storage Manager (SMClient) compatible subsystems and IBM FlashSystem
    storage.  Testing has been performed on the following models:

        FlashSystem 820     DS3860      DCS3700 
        DS3512              DS3524


    Support: 
    
        This software is provided as-is, with no express or implied
        support.  However, the author would love to receive your
        patches.  Please contact Brian E. Finley <bfinley\@us.ibm.com>
        with patches and/or suggestions.

        To request support for an additional storage subsystem, please
        email the output from 'lsscsi' to <bfinley\@us.ibm.com>.  Emails
        that have an actual storage subsystem attached (or at least
        remote access to one) are likely to get the most attention. ;-)


EOF
    return 1;
#XXXX    --blacklist DISK[,DISK,DISK] 
#
#        A comma delimited list of disks to blacklist.  
#        
#        If no --blacklist entry is specified, "sda" will automatically
#        be added to the blacklist as the default.  If you specify a
#        blacklist it overrides the default (doesn't add to it).  So if
#        you specify a blacklist, and want to include sda, it must be in
#        your comma delimited list.
#        
#        Example:  --blacklist sdi,sdb,sdm
#        
#
}


sub which {

    my $file = shift;
    my $path = shift;
    
    if( ! defined($path) ) { 
        $path = $ENV{PATH}; 
    }
    
    foreach my $dir (split(/:/,$path)) {
      if(-x "$dir/$file") {
        return "$dir/$file";
      }
    }
    return undef;
}

sub get_tmp_file {

    my $file;

    my $template_base = '/tmp/multipath.conf';
    my $cmd = qq(mktemp $template_base.XXX);

    open(INPUT,"$cmd|") or die("Couldn't run $cmd for input");
    while(<INPUT>) {
        if( m#^($template_base.*)# ) {
            $file = $1;
        }
    }
    close(INPUT);

    return $file;
}

sub user_is_root {

    if($< == 0) {
        return 1;
    }
    return undef;
}


# Usage:
# my $ip = hostname2ip($hostname);
# Description:
#       Convert hostname into the IPv4 address.
sub hostname2ip
{
       my $ip = (gethostbyname(shift))[4] || "";
       return $ip ? inet_ntoa( $ip ) : undef;
}

#
#   END Subroutines
#
########################################################################
